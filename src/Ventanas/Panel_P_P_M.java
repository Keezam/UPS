/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Otros_codigos.ConexionBD;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JeanPierre
 */
public class Panel_P_P_M extends javax.swing.JInternalFrame {
Connection conn = (Connection) ConexionBD.GetConnection();
    /**
     * Creates new form Panel_Producto
     */
    public Panel_P_P_M() {
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("BUSCAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(jTextField1.getText().equals(""))  { 
        JOptionPane.showMessageDialog(null, "VERIFICAR CAMPOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        }else{
            if(Principal1.rb_ingresos.isSelected()){
            if(Consultas.RadioButton_Producto.isSelected()){
               
                String nombre = jTextField1.getText();
            int a2 = Principal1.combo_ciudad_direccion.getSelectedIndex();
            Cargar_Todo_Tabla_ingreso_producto(nombre, a2);}
            else{
                 if(Consultas.RadioButton_Proveedor.isSelected()){
             
             String nombre = jTextField1.getText();
            int a2 = Principal1.combo_ciudad_direccion.getSelectedIndex();
            Cargar_Todo_Tabla_ingreso_proveedor(nombre, a2);}
        }
        }
                if(Principal1.rb_egresos.isSelected()){
            if(Consultas.RadioButton_Producto.isSelected()){
               
                String nombre = jTextField1.getText();
            int a2 = Principal1.combo_ciudad_direccion.getSelectedIndex();
            Cargar_Todo_Tabla_egresos_producto(nombre, a2);}
            else{
                 if(Consultas.RadioButton_Proveedor.isSelected()){
             
             String nombre = jTextField1.getText();
            int a2 = Principal1.combo_ciudad_direccion.getSelectedIndex();
            Cargar_Todo_Tabla_egresos_proveedor(nombre, a2);}
        }
        }
            
        }
      
    }//GEN-LAST:event_jButton1ActionPerformed

public void Cargar_Todo_Tabla_ingreso_proveedor(String nombre, int id){
           try {
            DefaultTableModel modelo = new DefaultTableModel();
            
            Principal1.tabla.setModel(modelo);
       
            Statement s = conn.createStatement();

            ResultSet rs = s.executeQuery("select tp.Nombre as Producto, mp.Nombre as Marca, mop.Nombre as Modelo, prov.nombre as Proveedor, sum(ing.Cantidad) as Cantidad_Total_ing "
                    + "from inv_Producto p, inv_Tipo_Producto tp, inv_Marca_Producto mp, inv_Modelo_Producto mop, cmprv_provedores prov, inv_Ingreso ing "
                    + "where ing.id_producto=p.id_producto and p.id_tipo=tp.id_tipo and p.id_marca=mp.id_marca and p.id_modelo=mop.id_modelo and p.id_proveedor=prov.id_provedor and  ing.id_sucursal= "+id+" "
                    + "and prov.nombre= '"+nombre+"' "
                    + "group by tp.Nombre, mp.Nombre, mop.Nombre,prov.nombre "
                    + "ORDER BY `ing`.`id_producto` ASC");

            ResultSetMetaData rsMd = rs.getMetaData();

            int cantidadColumnas = rsMd.getColumnCount();

            for (int i = 1; i <= cantidadColumnas; i++) {
                modelo.addColumn(rsMd.getColumnLabel(i));
            }

            while (rs.next()) {
                Object[] fila = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo.addRow(fila);
            }
            rs.close();
        
        } catch (Exception ex) {
            System.out.println("ERROR CARGAR TABLA "+ex);
        }
}

    public void Cargar_Todo_Tabla_ingreso_producto(String producto, int id){
           try {
            DefaultTableModel modelo = new DefaultTableModel();
            
            Principal1.tabla.setModel(modelo);
       
            Statement s = conn.createStatement();

            ResultSet rs = s.executeQuery("select tp.Nombre as Producto, mp.Nombre as Marca, mop.Nombre as Modelo, prov.nombre as Proveedor, sum(ing.Cantidad) as Cantidad_Total_ing "
                    + "from inv_Producto p, inv_Tipo_Producto tp, inv_Marca_Producto mp, inv_Modelo_Producto mop, cmprv_provedores prov, inv_Ingreso ing "
 +"where ing.id_producto=p.id_producto and p.id_tipo=tp.id_tipo and p.id_marca=mp.id_marca and p.id_modelo=mop.id_modelo and p.id_proveedor=prov.id_provedor and  ing.id_sucursal= "+id+" " 
                    +"and tp.Nombre= '"+producto+"' " 
                    +"group by tp.Nombre, mp.Nombre, mop.Nombre,prov.nombre "
                    + "ORDER BY `ing`.`id_producto` ASC");

            ResultSetMetaData rsMd = rs.getMetaData();

            int cantidadColumnas = rsMd.getColumnCount();

            for (int i = 1; i <= cantidadColumnas; i++) {
                modelo.addColumn(rsMd.getColumnLabel(i));
            }

            while (rs.next()) {
                Object[] fila = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo.addRow(fila);
            }
            rs.close();
        
        } catch (Exception ex) {
            System.out.println("ERROR CARGAR TABLA "+ex);
        }
    }
    
    
    public void Cargar_Todo_Tabla_egresos_producto(String producto, int id){
           try {
            DefaultTableModel modelo = new DefaultTableModel();
            
            Principal1.tabla.setModel(modelo);
       
            Statement s = conn.createStatement();

            ResultSet rs = s.executeQuery("select tp.Nombre as Producto, mp.Nombre as Marca, mop.Nombre as Modelo, prov.nombre as Proveedor, sum(eg.Cantidad) as Cantidad_Total_eg "
                    + "from inv_Producto p, inv_Tipo_Producto tp, inv_Marca_Producto mp, inv_Modelo_Producto mop, cmprv_provedores prov,inv_Egreso eg "
                    + "where eg.id_producto=p.id_producto and p.id_tipo=tp.id_tipo and p.id_marca=mp.id_marca and p.id_modelo=mop.id_modelo and p.id_proveedor=prov.id_provedor and  eg.id_sucursal="+id+" "
                    + "and tp.Nombre='"+producto+"' "
                    + "group by tp.Nombre, mp.Nombre, mop.Nombre,prov.nombre "
                    + "ORDER BY `eg`.`id_producto` ASC");

            ResultSetMetaData rsMd = rs.getMetaData();

            int cantidadColumnas = rsMd.getColumnCount();

            for (int i = 1; i <= cantidadColumnas; i++) {
                modelo.addColumn(rsMd.getColumnLabel(i));
            }

            while (rs.next()) {
                Object[] fila = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo.addRow(fila);
            }
            rs.close();
        
        } catch (Exception ex) {
            System.out.println("ERROR CARGAR TABLA "+ex);
        }
    }
    
    
    public void Cargar_Todo_Tabla_egresos_proveedor(String nombre, int id){
           try {
            DefaultTableModel modelo = new DefaultTableModel();
            
            Principal1.tabla.setModel(modelo);
       
            Statement s = conn.createStatement();

            ResultSet rs = s.executeQuery("select tp.Nombre as Producto, mp.Nombre as Marca, mop.Nombre as Modelo, prov.nombre as Proveedor, sum(eg.Cantidad) as Cantidad_Total_eg "
                    + "from inv_Producto p, inv_Tipo_Producto tp, inv_Marca_Producto mp, inv_Modelo_Producto mop, cmprv_provedores prov,inv_Egreso eg "
                    + "where eg.id_producto=p.id_producto and p.id_tipo=tp.id_tipo and p.id_marca=mp.id_marca and p.id_modelo=mop.id_modelo and p.id_proveedor=prov.id_provedor and  eg.id_sucursal="+id+" "
                    + "and prov.nombre='"+nombre+"' "
                    + "group by tp.Nombre, mp.Nombre, mop.Nombre,prov.nombre "
                    + "ORDER BY `eg`.`id_producto` ASC");

            ResultSetMetaData rsMd = rs.getMetaData();

            int cantidadColumnas = rsMd.getColumnCount();

            for (int i = 1; i <= cantidadColumnas; i++) {
                modelo.addColumn(rsMd.getColumnLabel(i));
            }

            while (rs.next()) {
                Object[] fila = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                modelo.addRow(fila);
            }
            rs.close();
        
        } catch (Exception ex) {
            System.out.println("ERROR CARGAR TABLA "+ex);
        }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
